---
title: DiÃ¡taxis
subtitle: A systematic approach to technical documentation authoring.
author: Niko Sirmpilatze
execute: 
  enabled: true
format:
    revealjs:
        theme: [default, diataxis-light.scss]
        logo: img/logo_niu_light.png
        footer: "NIU team meeting | 2023-10-17"
        slide-number: c
        menu:
            numbers: true
        chalkboard: true
        scrollable: true
        preview-links: false
        view-distance: 10
        mobile-view-distance: 10
        auto-animate: true
        auto-play-media: true
        code-overflow: wrap
        highlight-style: atom-one
        mermaid: 
          theme: neutral
          fontFamily: arial
          curve: linear
    html:
        theme: [default, diataxis-light.scss]
        logo: img/logo_niu_light.png
        date: "2023-07-05"
        toc: true
        code-overflow: scroll
        highlight-style: atom-one
        mermaid: 
          theme: neutral
          fontFamily: arial
          curve: linear
          margin-left: 0
        embed-resources: true
        page-layout: full
my-custom-stuff:
   my-reuseable-variable: "I can use this wherever I want in the markdown, and change it in only once place :)"
---

## The four types of docs

![](img/diataxis.webp){width=800 fig-align=center}

::: aside
> The Grand Unified Theory of Documentation
:::

## The two axes {.smaller}

- is __practical__ vs __theoretical__
- serves __study__ vs __work__

::: {.fragment}
| If the content describes... | ...and serves the user's... | ...then it must belong to... |
|-----------------------------|-----------------------------|------------------------------|
| practical steps             | study                       | a tutorial                   |
| practical steps             | work                        | a how-to guide               |
| theoretical knowledge       | work                        | reference                    |
| theoretical knowledge       | study                       | explanation                  |
:::

::: aside
source: [diataxis.fr/compass](https://diataxis.fr/compass/)
:::

## Tutorials

:::: {.columns}

::: {.column width=50%}
![](img/overview-tutorials.png)
:::

::: {.column width=50%}
> Tutorials are __lessons__ that take the reader by the hand through a series of steps to complete a project of some kind. Tutorials are __learning-oriented__.
:::

::::

::: aside
source: [diataxis.fr/tutorials](https://diataxis.fr/tutorials/)
:::

## What makes a good tutorial {.smaller}

*__Analogy:__ teaching a child to cook*

- focus on learning by doing
- the goals is to get the user started
- tell the learner what they will learn
- ensure reliability and repeatability
- give immediate results

::: {.fragment}
*__Minimize:__ abstractions, explanations, alternatives*
:::

::: aside
source: [diataxis.fr/tutorials](https://diataxis.fr/tutorials/)
:::

## How-to guides

:::: {.columns}

::: {.column width=50%}
![](img/overview-how-to.png)
:::

::: {.column width=50%}
> How-to guides are __directions__ that take the reader through the steps required to solve a real-world problem. How-to guides are __goal-oriented__.
:::

::::

::: aside
source: [diataxis.fr/how-to-guides](https://diataxis.fr/how-to-guides/)
:::

## What makes a good how-to guide {.smaller}

*__Analogy:__ recipes or SOPs*

- a sequence of actions
- solves a specific problem
- flexible enough to be adapted


::: {.fragment}
*__Minimize:__ teaching, explanations, digressions*
:::

::: aside
source: [diataxis.fr/how-to-guides](https://diataxis.fr/how-to-guides/)
:::

## References

:::: {.columns}

::: {.column width=50%}
![](img/overview-reference.png)
:::

::: {.column width=50%}
> Reference guides are __technical descriptions__ of the machinery and how to operate it. Reference material is __information-oriented__.
:::

::::

::: aside
source: [diataxis.fr/reference](https://diataxis.fr/reference/)
:::

## What makes a good reference {.smaller}

*__Analogy:__ encyclopedic entries, API index (docstrings)*

- reflects the structure of the machinery
- consistency
- accuracy
- contains examples
- austere and objective style

::: {.fragment}
*__Minimize:__ discussions, explanations, speculations*
:::

::: aside
source: [diataxis.fr/reference](https://diataxis.fr/reference/)
:::

## Just a code block, nothing gets executed...

... but there is some fancy highlighting

```{.python code-line-numbers="1|3|4-9"}
from pathlib import Path

home_path = Path.home()
if home_path.exists():
  data_path = home_path / "data"
else:
  pass
  # raise some error maybe?
```

## A code block that's actually executed at render-time

```{python}
#| echo: true
#| code-fold: true

from pathlib import Path

print("Hello world")
```

## You can execute code without showing that you have by using #|echo: false
```{python}
#| echo: false

from pathlib import Path

print("Hello world")
```

{{< include slides/extra_slide.qmd >}}

## An example image

Include an image:

![](img/bg_logo_wide.png){width=900 fig-align=center}


## Link and a preview a webpage:

::: {style="text-align: center; margin-top: 1em"}
[interoperable Python-based tools for computational neuroanatomy](https://brainglobe.info/index.html){preview-link="true" style="text-align: center"}
:::

## Use a variable several times

Variables defined in the metadata is re-useable anywhere

* {{< meta my-custom-stuff.my-reuseable-variable >}}
* {{< meta my-custom-stuff.my-reuseable-variable >}}
